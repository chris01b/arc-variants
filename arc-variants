#!/bin/bash
#
# arc-variants - Generate new color variations of the Arc theme.
#
# Copyright (c) 2016 - Giorgos Kappes <geokapp@gmail.com>
#
# This is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 3.0, as published by the Free Software
# Foundation.  See file COPYING.
#
# This script generates new color variations of the Arc theme,
# as well as their  respective high DPI versions. You can find
# the original Arc theme here:
# https://github.com/horst3180/arc-theme
#
# Currently, the following environments are supported:
# * xfwm4
# * gtk2
# * gtk3 Versions: 14, 16, 28, 20, 22
# * cinnamon
# * gnome-shell
#

THEME_PREFIX="/usr" ;
ARC_OPTIONS="--disable-transparency --disable-unity --disable-metacity --prefix=${THEME_PREFIX}" ;
DEPS_DEB="sed python autoconf automake pkg-config git inkscape optipng npm node" ;
DEPS_RPM="sed python autoconf automake pkgconfig git inkscape optipng npm node" ;
DEPS_PAC="sed python autoconf automake pkg-config git inkscape optipng npm node" ;
WORK_DIR=$(pwd) ;
SCRIPTS_DIR=${WORK_DIR}/internal/scripts ;
GTK2_DIR=${WORK_DIR}/internal/gtk2 ;
GTK3_DIR=${WORK_DIR}/internal/gtk3 ;
XFWM4_DIR=${WORK_DIR}/internal/xfwm4 ;
ARC_DIR=${WORK_DIR}/arc-theme ;
ARC_GIT="https://github.com/horst3180/arc-theme" ;
GTK3_VERSIONS="14 16 18 20 22" ;
ORIGINAL=0 ;
DPI=140 ;

# The last element's index of the variants array.
VSIZE=3 ;

# The build-in color names.
VARIANTS=("blue" "red" "green" "brown") ;

# The last element's index  of the colorN array. 
CSIZE=25 ;

# Blue (The base color).
COLORS0=("5294[Ee]2"    "353945"       "2[Bb]2[Ee]37" "5[Cc]616[Cc]" "404552"       "3[Ff]4453" \
	 "2[Ff]343[Ff]" "383[Cc]4[Aa]" "505666"       "3[Ee]4350"    "3[Ee]434[Ff]" "3[Ee]4351" \
	 "2[Ee]3340"    "444[Aa]58"    "393[Ff]4[Cc]" "363[Bb]48"    "313541"       "39404[Dd]" \
	 "353[Bb]48"    "21252[Bb]"    "[Aa][Ff][Bb]8[Cc]5" "[Bb][Aa][Cc]3[Cc][Ff]" "70788[Dd]" \
	 "979dac"       "808791"       "d3dae3") ;

# Red.
COLORS1=("e25252" "3d3d3d" "313131" "626262" "484848" "494949" "393939" "424242" "5f5f5f" \
	 "494949" "454545" "4a4a4a" "373737" "555555" "444444" "414141" "3d3d3d" "484848" \
	 "494949" "292929" "d1d1d1" "d1d1d1" "8d8d8d" "c2c2c2" "8d8d8d" "d3d3d3");

# Green.
COLORS2=("4DBF90" "35453E" "2B3732" "5C6C65" "40524A" "3F534A" "2F3F38" "384A43" "50665D" \
	 "3E5049" "3E4F48" "3E5149" "2E4039" "445850" "394C44" "364841" "31413A" "394d45" \
	 "354840" "212B27" "afc5bc" "bacfc6" "708d81" "97aca3" "708d81" "d3e3d0") ;
 
# Brown.
COLORS3=("BF824D" "453C35" "37312B" "6C635C" "524840" "53483F" "3F362F" "4A4038" "665A50" \
	 "50463E" "4F463E" "51473E" "40362E" "584D44" "4C4239" "483E36" "413831" "4d4239" \
	 "483E35" "2B2621" "c5b9af" "cfc3ba" "8d7d70" "aca097" "8d7d70" "e3dad3") ;

#
# print_help - Prints a help message.
#
print_help()
{
    local j ;

    echo 'Usage: ./arc-VARIANTS [options]' ;
    echo 'Options:' ;
    echo '  -i, --install=VAR:      Install the variant VAR. The VAR argument has the' ;
    echo '                          form: name[-hidpi][:colorhex]. The name field is' ;
    echo '                          the name of the color variant. It can be either a' ;
    echo '                          build-in variant name, or a user-defined name. In' ;
    echo '                          the former case, the colorhex field is omitted. But,' ;
    echo '                          in the latter case it is mandatory. The hidpi argument' ;
    echo '                          informs the tool to build the hidpi version of the' ;
    echo '                          requested variant. For example: -i=red-hidpi informs' ;
    echo '                          the tool to install the hidpi version of the build-in' ;
    echo '                          red variant. -i=mycolor:7636a3 informs the tool to' ;
    echo '                          install the user defined color variant mycolor and' ;
    echo '                          to create shades of #7636a3. The supported build-in' ;
    echo -n '                          variants are: ' ;
    for j in $(seq 0 1 ${VSIZE}); do
	echo -n "${VARIANTS[${j}]}," ;
    done ;
    echo -e '\b.' ;
    echo '  -u, --uninstall=NAME:   Uninstall the variant with name NAME.' ; 
    echo '  -v, --gtk3-version=VER: Set the gtk3 versions. The supported versions are: 14,' ;
    echo '                          16, 18, 20, 22. E.g., -v="18 20 22". The default is to' ;
    echo '                          build the theme for all versions.' ;
    echo '  -p, --dpi=VAL           Set a custom DPI value for the high DPI variants. The' ;
    echo '                          default is 140.' ;
    echo '  -d, --disable-dark:     Disable all the dark variants.' ;
    echo '  -o, --original:         Use the original assets of the Arc theme.' ;
    echo '  -c, --clear:            Delete all the generated content.' ;
    echo '  -h, --help:             Print this help message.' ;
}

#
# check_dependencies - Checks if the required packages are installed.
# 
check_dependencies()
{
    local fail=0 ;
    local i ;

    echo "Checking dependencies..." ;
    
    if hash "dpkg" 2> /dev/null; then
	DEPS=${DEPS_DEB} ;
    elif hash "rpm" 2> /dev/null; then
	DEPS=${DEPS_RPM} ;
    elif hash "pacman" 2> /dev/null; then
	DEPS=${DEPS_PAC} ;
    else
	echo "Error. Your Linux distribution is not yet supported."
    fi ;
    
    for i in ${DEPS}; do	
	echo -n "Checking ${i}..." ;
	if hash ${i} 2> /dev/null; then
	    echo "ok" ;
	else
	    if [ "${i}" = "node" ]; then
		if hash nodejs 2> /dev/null; then
		    echo "failed, but nodejs is installed. You can \
create a symbolic link from $(which nodejs) to /usr/bin/node to resolve \
this issue." ;
		else
		    echo "failed. Nodejs is missing." ;
		fi ;
	    else
		echo "failed." ;
	    fi
	    fail=1 ;
	fi ;
    done ;
    if [ ${fail} -eq 1 ]; then
	echo "Install the missing dependencies and try again." ;
	exit 1 ;
    fi ;
}

#
# init - Performs the required initialization steps.
#
init()
{
    # Clear any previous builds.
    clear ;
    
    # Check dependencies.
    check_dependencies ;

    # fix permissions.
    chmod +x ${SCRIPTS_DIR}/* ;

    # Prepare the ORIGINAL Arc theme.
    prepare_arc ;

    # Create assets directories.
    mkdir ${XFWM4_DIR}/assets ;
    mkdir ${XFWM4_DIR}/assets-dark ;
    mkdir ${GTK2_DIR}/menubar-toolbar ;
    mkdir ${GTK2_DIR}/assets
    mkdir ${GTK2_DIR}/assets-dark
    for i in ${GTK3_VERSIONS}; do
	mkdir ${GTK3_DIR}/${i}/assets ;
    done ;
}

#
# clear - Clears the generated content.
#
clear()
{
    local i ;
    
    echo "Cleaning..." ;
    rm -rf ${ARC_DIR} ;
    rm -rf ${XFWM4_DIR}/assets/* ;
    rm -rf ${XFWM4_DIR}/assets-dark/* ;
    rm -rf ${GTK2_DIR}/assets/* ;
    rm -rf ${GTK2_DIR}/assets-dark/* ;
    rm -rf ${GTK2_DIR}/menubar-toolbar/* ;
    for i in ${GTK3_VERSIONS}; do
	rm -rf ${GTK3_DIR}/${i}/assets/* ;
    done ;
    echo "Done." ;
}

#
# prepare_arc - Downloads the last version of the Arc theme and prepares
#               the node-sass environment.
#
prepare_arc()
{
    cd ${WORK_DIR} ;

    # Clone the ORIGINAL Arc theme.
    echo "Cloning Arc-theme..." ;
    git clone ${ARC_GIT} --depth 1 ;
    if [ -d "arc-theme" ]; then
	cd arc-theme ;
    else
	echo "Error: Cannot clone the original arc-theme." ;
	exit 1 ;
    fi ;
    echo "Done." ;

    # Prepare the node-sass environment.
    echo "Preparing node-sass..." ;
    cd common ;    
    echo "Please give the root password to prepare node-sass." ;
    if su -c "npm i && npm i -g gulp && chown $(who | cut -f1 -d" " | head -1) ${ARC_DIR} -R;"; then
       echo "Done." ;
    else
	echo "Error: Node-sass preparation failed." ;
	exit 1 ;
    fi ;
}

#
# render_assets - Renders the asset images.
# $1: The hidpi flag (0 for normal, 1 for hidpi).
# $2: The variant name.
#
render_assets()
{
    local hidpi=${1} ;
    local name=${2} ;
    local i ;

    if [ -z "${hidpi}" ] || [ -z "${name}" ]; then
	return ;
    fi ;
    # Render xfwm4 assets.
    echo "Rendering xfwm4 assets..." ;
    rm -rf ${XFWM4_DIR}/assets/* ;
    rm -rf ${XFWM4_DIR}/assets-dark/* ;
    if [ ${hidpi} -eq 0 ]; then
	${SCRIPTS_DIR}/xfwm4-render-assets.sh ${XFWM4_DIR}/assets-${name} \
		                              ${XFWM4_DIR}/assets \
		                              ${XFWM4_DIR}/assets.txt ;
    else
	${SCRIPTS_DIR}/xfwm4-hidpi-render-assets.sh ${XFWM4_DIR}/assets-${name} \
		                                    ${XFWM4_DIR}/assets \
						    ${XFWM4_DIR}/assets.txt ${DPI} ;
    fi ;
    cp -rf ${XFWM4_DIR}/assets ${ARC_DIR}/common/xfwm4/. ;
    cp -rf ${XFWM4_DIR}/assets-dark ${ARC_DIR}/common/xfwm4/. ;
    echo "Done." ;

    # Render gtk2 assets.
    echo "Rendering gtk2 assets..." ;
    rm -rf ${GTK2_DIR}/assets/* ;
    rm -rf ${GTK2_DIR}/assets-dark/* ;
    if [ ${hidpi} -eq 0 ]; then
	${SCRIPTS_DIR}/gtk2-render-assets.sh ${GTK2_DIR}/assets-${name} \
					     ${GTK2_DIR}/assets \
					     ${GTK2_DIR}/assets.txt ;
    else
	${SCRIPTS_DIR}/gtk2-hidpi-render-assets.sh ${GTK2_DIR}/assets-${name} \
						   ${GTK2_DIR}/assets \
						   ${GTK2_DIR}/assets.txt ${DPI} ;
    fi ;
    cp -rf ${GTK2_DIR}/assets ${ARC_DIR}/common/gtk-2.0/. ;
    cp -rf ${GTK2_DIR}/assets-dark ${ARC_DIR}/common/gtk-2.0/. ;
    cp -rf ${GTK2_DIR}/menubar-toolbar ${ARC_DIR}/common/gtk-2.0/. ;
    echo "Done." ;

    # Render gtk3 assets.
    for i in ${GTK3_VERSIONS}; do
	echo "Rendering gtk3.${i} assets..." ;
	rm -rf ${GTK3_DIR}/${i}/assets/* ;
	if [ ${hidpi} -eq 0 ]; then
	    ${SCRIPTS_DIR}/gtk3-render-assets.sh ${GTK3_DIR}/${i}/assets-${name} \
					         ${GTK3_DIR}/${i}/assets \
					         ${GTK3_DIR}/${i}/assets.txt ;
	else
	    ${SCRIPTS_DIR}/gtk3-hidpi-render-assets.sh ${GTK3_DIR}/${i}/assets-${name} \
						       ${GTK3_DIR}/${i}/assets \
						       ${GTK3_DIR}/${i}/assets.txt ${DPI} ;
	fi ;
	cp -rf ${GTK3_DIR}/${i}/assets ${ARC_DIR}/common/gtk-3.0/3.${i}/. ;
	echo "Done." ;
    done ;
}

#
# change_common - Performs some common changes to the ORIGINAL Arc theme.
#
change_common()
{
    # xfwm4.
    sed -i 's/[Ee]7[Ee]8[Ee][Bb]/f5f6f7/g' ${ARC_DIR}/common/xfwm4/themerc ;
    sed -i 's/[Ee]7[Ee]8[Ee][Bb]/f5f6f7/g' ${XFWM4_DIR}/assets-blue.svg ;
    
    # gtk2.
    sed -i 's/[Ee]7[Ee]8[Ee][Bb]/f5f6f7/g' ${GTK2_DIR}/assets-blue.svg ;
    local files=$(find ${ARC_DIR}/common/gtk-2.0/ -type f ! -name "*.png") ;
    local i ;
    for i in ${files}; do
	sed -i 's/[Ee]7[Ee]8[Ee][Bb]/f5f6f7/g' ${i} ;
    done ;

    # Change the backround of the workspace switcher.
    sed -i 's/style "workspace-switcher" = "theme-panel" {/style "workspace-switcher" = \
"theme-panel" {\nbg[NORMAL] = "#666666"\nbg[PRELIGHT] = "#999999"\n/g' ${ARC_DIR}/common/gtk-2.0/panel.rc ;
    
    # gtk3.
    for i in ${GTK3_VERSIONS}; do
	sed -i 's/[Ee]7[Ee]8[Ee][Bb]/f5f6f7/g' ${GTK3_DIR}/${i}/assets-blue.svg ;
	sed -i 's/[Ee]7[Ee]8[Ee][Bb]/f5f6f7/g' ${ARC_DIR}/common/gtk-3.0/3.${i}/sass/_colors.scss ;
    done ;
}

#
# change_color_buildin - Changes the theme's color to a new variant.
# $1: The variant name.
#
change_color_buildin()
{
    local variant ;
    local color1 ;
    local color2 ;
    local i ;
    local j ;
    local c ;
    local files ;
    local name=${1} ;

    if [ -z "${name}" ]; then
	return ;
    fi ;

    echo "Changing theme to ${name} variant..." ;
    
    # Get the correct color map.
    for j in $(seq 0 1 ${VSIZE}); do
	if [ "${name}" == "${VARIANTS[${j}]}" ]; then
	    variant=${j} ;
	fi ;
    done ;
    
    # xfwm4.
    cp ${XFWM4_DIR}/assets-blue.svg ${XFWM4_DIR}/assets-${name}.svg ;
    cp ${XFWM4_DIR}/assets-blue-dark.svg ${XFWM4_DIR}/assets-${name}-dark.svg ;
    for c in $(seq 0 1 ${CSIZE}); do
	color1=COLORS0[${c}] ;
	color2=COLORS${variant}[${c}] ;
	sed -i "s/${!color1}/${!color2}/g" ${ARC_DIR}/common/xfwm4/themerc ;
	sed -i "s/${!color1}/${!color2}/g" ${ARC_DIR}/common/xfwm4/themerc-dark ;
    done ;
    
    # Change title buttons.
    for c in $(seq 0 1 ${CSIZE}); do
	color1=COLORS0[${c}] ;
	color2=COLORS${variant}[${c}] ;
	sed -i "s/${!color1}/${!color2}/g" ${XFWM4_DIR}/assets-${name}.svg ;
	sed -i "s/${!color1}/${!color2}/g" ${XFWM4_DIR}/assets-${name}-dark.svg ;
    done ;    
    
    # gtk2.
    cp ${GTK2_DIR}/assets-blue.svg ${GTK2_DIR}/assets-${name}.svg ;
    cp ${GTK2_DIR}/assets-blue-dark.svg ${GTK2_DIR}/assets-${name}-dark.svg ;    
    for c in $(seq 0 1 ${CSIZE}); do
	color1=COLORS0[${c}] ;
	color2=COLORS${variant}[${c}] ;
	sed -i "s/${!color1}/${!color2}/g" ${GTK2_DIR}/assets-${name}.svg ;
	sed -i "s/${!color1}/${!color2}/g" ${GTK2_DIR}/assets-${name}-dark.svg ;
    done ;
    files=$(find ${ARC_DIR}/common/gtk-2.0/ -type f ! -name "*.png") ;
    for i in ${files}; do
	for c in $(seq 0 1 ${CSIZE}); do
	    color1=COLORS0[${c}] ;
	    color2=COLORS${variant}[${c}] ;
	    sed -i "s/${!color1}/${!color2}/g" ${i} ;
	done ;
    done ;

    # gtk3.
    for i in ${GTK3_VERSIONS}; do
	cp ${GTK3_DIR}/${i}/assets-blue.svg ${GTK3_DIR}/${i}/assets-${name}.svg ;
	for c in $(seq 0 1 ${CSIZE}); do
	    color1=COLORS0[${c}] ;
	    color2=COLORS${variant}[${c}] ;
	    sed -i "s/${!color1}/${!color2}/g" ${ARC_DIR}/common/gtk-3.0/3.${i}/sass/_colors.scss ;
	    sed -i "s/${!color1}/${!color2}/g" ${GTK3_DIR}/${i}/assets-${name}.svg ;
	done ;
    done ;

    # cinnamon.
    for c in $(seq 0 1 ${CSIZE}); do
	color1=COLORS0[${c}] ;
	color2=COLORS${variant}[${c}] ;
	sed -i "s/${!color1}/${!color2}/g" ${ARC_DIR}/common/cinnamon/sass/_colors.scss ;
	files=$(find ${ARC_DIR}/common/cinnamon/ -type f -name "*.svg") ;
	for i in ${files}; do
	    sed -i "s/${!color1}/${!color2}/g" ${i} ;
	done ;
    done ;

    # gnome-shell.
    for i in ${GTK3_VERSIONS}; do
	for c in $(seq 0 1 ${CSIZE}); do
	    color1=COLORS0[${c}] ;
	    color2=COLORS${variant}[${c}] ;
	    sed -i "s/${!color1}/${!color2}/g" ${ARC_DIR}/common/gnome-shell/3.${i}/sass/_colors.scss ;
	    files=$(find ${ARC_DIR}/common/gnome-shell/3.${i} -type f -name "*.svg") ;
	    for j in ${files}; do
		sed -i "s/${!color1}/${!color2}/g" ${j} ;
	    done ;
	done ;
    done;
    echo "Done." ;
}

#
# change_color_user - Changes the theme's color to a new user defined variant.
# $1: The variant name.
# $2: The color name in hex.
#
change_color_user()
{
    local i ;
    local j ;
    local c ;
    local color1 ;
    local color2 ;
    local files ;
    local name=${1} ;
    local color=${2} ;

    if [ -z "${name}" ] || [ -z "${color}" ]; then
	return ;
    fi ;

    echo "Changing theme to ${name} (${color}) variant..." ;
    
    # xfwm4.
    cp ${XFWM4_DIR}/assets-blue.svg ${XFWM4_DIR}/assets-${name}.svg ;
    cp ${XFWM4_DIR}/assets-blue-dark.svg ${XFWM4_DIR}/assets-${name}-dark.svg ;

    for c in $(seq 0 1 ${CSIZE}); do
	color1=COLORS0[${c}] ;	
	color2=$(python ${SCRIPTS_DIR}/map_color.py ${color} ${!color1}) ;
	sed -i "s/${!color1}/${color2}/g" ${ARC_DIR}/common/xfwm4/themerc ;
	sed -i "s/${!color1}/${color2}/g" ${ARC_DIR}/common/xfwm4/themerc-dark ;
    done ;
    
    # Change title buttons.
    for c in $(seq 0 1 ${CSIZE}); do
	color1=COLORS0[${c}] ;
	color2=$(python ${SCRIPTS_DIR}/map_color.py ${color} ${!color1}) ;
	sed -i "s/${!color1}/${color2}/g" ${XFWM4_DIR}/assets-${name}.svg ;
	sed -i "s/${!color1}/${color2}/g" ${XFWM4_DIR}/assets-${name}-dark.svg ;
    done ;
        
    # gtk2.
    cp ${GTK2_DIR}/assets-blue.svg ${GTK2_DIR}/assets-${name}.svg ;
    cp ${GTK2_DIR}/assets-blue-dark.svg ${GTK2_DIR}/assets-${name}-dark.svg ;    
    for c in $(seq 0 1 ${CSIZE}); do
	color1=COLORS0[${c}] ;
	color2=$(python ${SCRIPTS_DIR}/map_color.py ${color} ${!color1}) ;
	sed -i "s/${!color1}/${color2}/g" ${GTK2_DIR}/assets-${name}.svg ;
	sed -i "s/${!color1}/${color2}/g" ${GTK2_DIR}/assets-${name}-dark.svg ;
    done ;
    files=$(find ${ARC_DIR}/common/gtk-2.0/ -type f ! -name "*.png") ;
    for i in ${files}; do
	for c in $(seq 0 1 ${CSIZE}); do
	    color1=COLORS0[${c}] ;
	    color2=$(python ${SCRIPTS_DIR}/map_color.py ${color} ${!color1}) ;
	    sed -i "s/${!color1}/${color2}/g" ${i} ;
	done ;
    done ;

    # gtk3.
    for i in ${GTK3_VERSIONS}; do
	cp ${GTK3_DIR}/${i}/assets-blue.svg ${GTK3_DIR}/${i}/assets-${name}.svg ;
	for c in $(seq 0 1 ${CSIZE}); do
	    color1=COLORS0[${c}] ;
	    color2=$(python ${SCRIPTS_DIR}/map_color.py ${color} ${!color1}) ;
	    sed -i "s/${!color1}/${color2}/g" ${ARC_DIR}/common/gtk-3.0/3.${i}/sass/_colors.scss ;
	    sed -i "s/${!color1}/${color2}/g" ${GTK3_DIR}/${i}/assets-${name}.svg ;
	done ;
    done ;

    # cinnamon.
    for c in $(seq 0 1 ${CSIZE}); do
	color1=COLORS0[${c}] ;
	color2=$(python ${SCRIPTS_DIR}/map_color.py ${color} ${!color1}) ;
	sed -i "s/${!color1}/${color2}/g" ${ARC_DIR}/common/cinnamon/sass/_colors.scss ;
	files=$(find ${ARC_DIR}/common/cinnamon/ -type f -name "*.svg") ;
	for i in ${files}; do
	    sed -i "s/${!color1}/${color2}/g" ${i} ;
	done ;
    done ;

    # gnome-shell.
    for i in ${GTK3_VERSIONS}; do
	for c in $(seq 0 1 ${CSIZE}); do
	    color1=COLORS0[${c}] ;
	    color2=$(python ${SCRIPTS_DIR}/map_color.py ${color} ${!color1}) ;
	    sed -i "s/${!color1}/${color2}/g" ${ARC_DIR}/common/gnome-shell/3.${i}/sass/_colors.scss ;
	    files=$(find ${ARC_DIR}/common/gnome-shell/3.${i} -type f -name "*.svg") ;
	    for j in ${files}; do
		sed -i "s/${!color1}/${color2}/g" ${j} ;
	    done ;
	done ;
    done ;
    echo "Done." ;
}

#
# copy_original_assets - Use the assets of the ORIGINAL Arc theme.
#
copy_original_assets()
{
    local i ;
    
    # xfwm4.
    mv ${XFWM4_DIR}/assets-blue.svg ${XFWM4_DIR}/assets-blue.svg.bak ;
    mv ${XFWM4_DIR}/assets-blue-dark.svg ${XFWM4_DIR}/assets-blue-dark.svg.bak ;
    cp ${ARC_DIR}/common/xfwm4/assets.svg ${XFWM4_DIR}/assets-blue.svg ;
    cp ${ARC_DIR}/common/xfwm4/assets-dark.svg ${XFWM4_DIR}/assets-blue-dark.svg ;

    # gtk2.
    mv ${GTK2_DIR}/assets-blue.svg ${GTK2_DIR}/assets-blue.svg.bak ;
    mv ${GTK2_DIR}/assets-blue-dark.svg ${GTK2_DIR}/assets-blue-dark.svg.bak ;
    cp ${ARC_DIR}/common/gtk-2.0/assets.svg ${GTK2_DIR}/assets-blue.svg ;
    cp ${ARC_DIR}/common/gtk-2.0/assets-dark.svg ${GTK2_DIR}/assets-blue-dark.svg ;

    # gtk3.
    for i in ${GTK3_VERSIONS}; do
	mv ${GTK3_DIR}/${i}/assets-blue.svg ${GTK3_DIR}/${i}/assets-blue.svg.bak ;
	cp ${ARC_DIR}/common/gtk-3.0/3.${i}/assets.svg ${GTK3_DIR}/${i}/assets-blue.svg ;
    done ;
}
    
#
# revert_custom_assets - Revert back the custom assets.
#
revert_custom_assets() {
    local i ;
	
    # xfwm4.
    mv ${XFWM4_DIR}/assets-blue.svg.bak ${XFWM4_DIR}/assets-blue.svg ;
    mv ${XFWM4_DIR}/assets-blue-dark.svg.bak ${XFWM4_DIR}/assets-blue-dark.svg ;

    # gtk2.
    mv ${GTK2_DIR}/assets-blue.svg.bak ${GTK2_DIR}/assets-blue.svg ;
    mv ${GTK2_DIR}/assets-blue-dark.svg.bak ${GTK2_DIR}/assets-blue-dark.svg ;

    # gtk3.
    for i in ${GTK3_VERSIONS}; do
	mv ${GTK3_DIR}/${i}/assets-blue.svg.bak ${GTK3_DIR}/${i}/assets-blue.svg ;
    done ;
}

#
# install_variant - Installs a theme variant.
# $1: The variant name. 
# $2: The user defined color or the hidpi flag.
# $3: The hidpi flag.
#  
install_variant()
{
    local name=${1} ;
    local color=${2} ;
    local hidpi=${3} ;

    if [ "${color}" = "hidpi" ]; then
	hidpi="hidpi" ;
	color="" ;
    fi ;
    
    init ;

    echo "Installing Arc-${name}..." ;
    
    # Check if the user wants the original assets.
    if [ ${ORIGINAL} -eq 1 ]; then
	copy_original_assets ;
    else
	change_common ;
    fi ;

    # If the requested variant is not blue then map the original 
    # colors to the colors of the requested variant.
    if [ "${name}" != "blue" ]; then
	if [ -n "${color}" ]; then
	    change_color_user ${name} ${color} ;
	else
	    change_color_buildin ${name} ;
	fi ;
    fi ;

    # Render the assets.
    if [ "${hidpi}" != "hidpi" ]; then
	render_assets 0 ${name} ;
    else
	render_assets 1 ${name} ;
    fi ;

    # Modify the target theme name and build the theme.
    if [ "${hidpi}" != "hidpi" ]; then
	sed -i "s/Arc/Arc-${name}/g" ${ARC_DIR}/common/Makefile.am ;
	sed -i "s/Arc/Arc-${name}/g" ${ARC_DIR}/common/index.theme ;
	sed -i "s/Arc/Arc-${name}/g" ${ARC_DIR}/common/index.theme-dark ;
	sed -i "s/Arc/Arc-${name}/g" ${ARC_DIR}/common/index.theme-darker ;
    else
	sed -i "s/Arc/Arc-${name}-hidpi/g" ${ARC_DIR}/common/Makefile.am ;
	sed -i "s/Arc/Arc-${name}-hidpi/g" ${ARC_DIR}/common/index.theme ;
	sed -i "s/Arc/Arc-${name}-hidpi/g" ${ARC_DIR}/common/index.theme-dark ;
	sed -i "s/Arc/Arc-${name}-hidpi/g" ${ARC_DIR}/common/index.theme-darker ;
    fi ;
    cd ${ARC_DIR}/ ;
    gulp ;
    ./autogen.sh ${ARC_OPTIONS} ;

    echo "Please give the root password to install the theme." ;
    if [ "${hidpi}" != "hidpi" ]; then
	su -c "rm -r ${THEME_PREFIX}/share/themes/Arc-${name}; rm -r ${THEME_PREFIX}/share/themes/Arc-${name}-Dark; rm -r ${THEME_PREFIX}/share/themes/Arc-${name}-Darker; make install" ;
    else
	su -c "rm -r ${THEME_PREFIX}/share/themes/Arc-${name}-hidpi; rm -r ${THEME_PREFIX}/share/themes/Arc-${name}-hidpi-Dark; rm -r ${THEME_PREFIX}/share/themes/Arc-${name}-hidpi-Darker; make install" ;
    fi ;
    echo "Done." ;    

    # Revert back the original assets.
    if [ ${ORIGINAL} -eq 1 ]; then
	revert_custom_assets ;
    fi ;

    # Clear the generated content.
    clear ;
}	     

#
# uninstall_variant - Uninstalls a theme variant.
# $1: The variant name.
#
uninstall_variant()
{
    if ! [ $# -eq 0 ]; then
	local name=${1} ;    
	echo "Uninstalling Arc-${name}..." ;
	echo "Please give the root password to uninstall the theme." ;
	su -c "rm -r ${THEME_PREFIX}/share/themes/Arc-${name}; rm -r ${THEME_PREFIX}/share/themes/Arc-${name}-Dark; rm -r ${THEME_PREFIX}/share/themes/Arc-${name}-Darker" && echo "Done." ;
    fi ;
}

#
# parse_parameters - Parse the user parameters.
# $*: All the user provided arguments.
#
parse_parameters()
{
    local param="" ;
    local name="" ;
    local hidpi="" ;
    local color="" ;
    local operation="" ;
    local i ;
    local j ;
    local found ;
    
    for i in "$@"; do
	case ${i} in
	    -i=*|--install=*)
		param="${i#*=}" ;
		IFS='-' read -a tmp <<< "${param}" ;
		name=${tmp[0]} ;
		hidpi=${tmp[1]} ;
		if [ -n "${hidpi}" ]; then
		    IFS=':' read -a tmp <<< "${hidpi}" ;
		    hidpi=${tmp[0]} ;
		    color=${tmp[1]} ;
		    if [ "${hidpi}" != "hidpi" ]; then
			name="${name}-${hidpi}" ;
			hidpi="" ;
		    fi ;
		else
		    IFS=':' read -a tmp <<< "${name}" ;
		    name=${tmp[0]} ;
		    color=${tmp[1]} ;
		fi ;
		found=0 ;
		for j in $(seq 0 1 ${VSIZE}); do
		    if [ "${name}" = "${VARIANTS[${j}]}" ]; then
			found=1 ;
		    fi ;
		done ;
		if [ -z "${name}" ]; then
		    echo "Error: A theme name is required." ;
		    print_help ;
		    exit 1 ;
		fi ;
		if [ ${found} -eq 0 ] && [ -z "${color}" ]; then
		    echo "Error: The variant ${name} is not build-in. You must provide a custom color." ;
		    print_help ;
		    exit 1 ;
		fi ;
		color=${color#"#"} ;
		operation="install_variant" ;
		shift ;
		;;
	    -u=*|--uninstall=*)
		name="${i#*=}" ;
		if [ -z "${name}" ]; then
		    echo "Error: the -u, --uninstall option requires a theme name." ;
		    print_help ;
		    exit 1 ;
		fi ;
		operation="uninstall_variant" ;
		shift ;
		;;
	    -v=*|--gtk3-versions=*)
 		param="${i#*=}" ;
		if [ -n "${param}" ]; then
		    GTK3_VERSIONS="${param}" ;
		else
		    echo "Error: -g, --gtk3-versions requires a parameter." ;
		    exit 1 ;
		fi ;
		shift ;
		;;
	    -p=*|--dpi=*)
 		param="${i#*=}" ;
		if [ -n "${param}" ]; then
		    DPI=${param} ;
		else
		    echo "Error: -p, --dpi requires a parameter." ;
		    exit 1 ;
		fi ;
		shift ;
		;;
	    -d|--disable-dark)
		ARC_OPTIONS+=" --disable-dark --disable-darker" ;
		shift ;
		;;
	    -o|--original)
		ORIGINAL=1 ;
		shift ;
		;;
	    -c|--clear)
		operation="clear" ;
		shift ;
		;;
	    -h|--help)
		operation="print_help" ;
		shift ;
		;;
	esac ;
    done ;
    
    if [ -z "${operation}" ]; then
	print_help ;
	exit 0 ;
    fi ;
    
    eval ${operation} ${name} ${color} ${hidpi} ;
    exit 0 
}

# Parse user parameters.
parse_parameters $*

